// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	callopt "github.com/cloudwego/kitex/client/callopt"

	mock "github.com/stretchr/testify/mock"

	rpc "github.com/jh-chee/kitewave/rpc-server/kitex_gen/rpc"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Pull provides a mock function with given fields: ctx, req, callOptions
func (_m *Client) Pull(ctx context.Context, req *rpc.PullRequest, callOptions ...callopt.Option) (*rpc.PullResponse, error) {
	_va := make([]interface{}, len(callOptions))
	for _i := range callOptions {
		_va[_i] = callOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpc.PullResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.PullRequest, ...callopt.Option) (*rpc.PullResponse, error)); ok {
		return rf(ctx, req, callOptions...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.PullRequest, ...callopt.Option) *rpc.PullResponse); ok {
		r0 = rf(ctx, req, callOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.PullResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpc.PullRequest, ...callopt.Option) error); ok {
		r1 = rf(ctx, req, callOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: ctx, req, callOptions
func (_m *Client) Send(ctx context.Context, req *rpc.SendRequest, callOptions ...callopt.Option) (*rpc.SendResponse, error) {
	_va := make([]interface{}, len(callOptions))
	for _i := range callOptions {
		_va[_i] = callOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rpc.SendResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.SendRequest, ...callopt.Option) (*rpc.SendResponse, error)); ok {
		return rf(ctx, req, callOptions...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.SendRequest, ...callopt.Option) *rpc.SendResponse); ok {
		r0 = rf(ctx, req, callOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.SendResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rpc.SendRequest, ...callopt.Option) error); ok {
		r1 = rf(ctx, req, callOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
